#tag ClassClass CFBundleInherits CFType	#tag Method, Flags = &h0		Function ExecutableFile() As CFURL		  if me.Equals(nil) then		    return nil		  end if		  		  #if TargetMacOS		    soft declare function CFBundleCopyExecutableURL lib CarbonFramework (theBundle as Ptr) as Ptr		    		    dim theURL as CFURL = CFBundleCopyExecutableURL(me)		    if theURL.Equals(nil) then		      return nil		    else		      return theURL		    end if		  #endif		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Resource(name as String, type as String, subDirectoryName as String) As CFURL		  if me.Equals(nil) then		    return nil		  end if		  		  		  '#if targetMacOS		  'soft declare function CFBundleCopyResourceURL lib CarbonFramework (bundle as Integer, resourceName as Integer, resourceType as Integer, subDirName as Integer) as Integer		  'soft declare function CFBundleCopyResourceURLInDirectory lib CarbonFramework (bundleURL as Integer, resourceName as Integer, resourceType as Integer, subDirName as Integer) as Integer		  'soft declare function CFBundleCopyBundleURL lib CarbonFramework (bundle as Integer) as Integer		  '		  'dim theRef as Integer		  'dim theURL as CFURL		  'dim typeRef as Integer		  'dim subDirRef as Integer		  'dim urlRef as Integer		  '		  'If name Is Nil then		  'Return Nil		  'End if		  'If type Is Nil then		  'typeRef = 0		  'Else		  'typeRef = type		  'End if		  'If subDirectoryName Is Nil then		  'subDirRef = 0		  'Else		  'subDirRef = subDirectoryName		  'End if		  '		  'theRef = CFBundleCopyResourceURL(me, name, typeRef, subDirRef)		  'CoreFoundation.CheckCFTypeRef theRef, "CFBundle", "Resource", "CFBundleCopyResourceURL"		  'theURL = new CFURL(theRef)		  '#endif		  '		  'Exception oops as CFTypeRefException		  'theURL = Nil		  '		  'Finally		  'CoreFoundation.Release theRef		  'Return theURL		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ResourcesDirectory() As CFURL		  if me.Equals(nil) then		    return nil		  end if		  		  #if targetMacOS		    soft declare function CFBundleCopyResourcesDirectoryURL lib CarbonFramework (theBundle as Ptr) as Ptr		    		    dim theURL as CFURL = CFBundleCopyResourcesDirectoryURL(me)		    if theURL.Equals(nil) then		      return nil		    else		      return theURL		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function DataPointer(symbolName as String) As Ptr		  if me.Equals(nil) then		    return nil		  end if		  		  #if TargetMacOS		    soft declare function CFBundleGetDataPointerForName lib CarbonFramework (bundle as Ptr, symbolName as CFStringRef) as Ptr		    		    return CFBundleGetDataPointerForName(me, symbolName)		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Identifier() As String		  if me.Equals(nil) then		    return ""		  end if		  		  #if targetMacOS		    soft declare function CFBundleGetIdentifier lib CarbonFramework (bundle as Ptr) as CFStringRef		    		    dim theString as CFStringRef = CFBundleGetIdentifier(me)		    theString.Retain		    return theString		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URL() As CFURL		  #if targetMacOS		    soft declare function CFBundleCopyBundleURL lib CarbonFramework (bundle as Ptr) as Ptr		    		    dim theURL as CFURL = CFBundleCopyBundleURL(me)		    if theURL.Equals(nil) then		      return nil		    else		      return theURL		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function InfoDictionary() As CFDictionary		  if me.Equals(nil) then		    return nil		  end if		  		  #if targetMacOS		    soft declare function CFBundleGetInfoDictionary lib CarbonFramework (bundle as Ptr) as Ptr		    		    dim d as CFDictionary = CFBundleGetInfoDictionary(me)		    return d		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function InfoDictionaryValue(key as String) As CFType		  if me.Equals(nil) then		    return nil		  end if		  		  		  		  		  'dim valueRef as Integer		  'dim theValue as CFPropertyList		  '		  'Const kCFPropertyListImmutable = 0		  '		  'If key Is Nil then		  'Return Nil		  'End if		  '		  '#if targetMacOS		  'soft declare function CFBundleGetValueForInfoDictionaryKey lib CarbonFramework (bundle as Integer, key as Integer) as Integer		  '		  'valueRef = CFBundleGetValueForInfoDictionaryKey(me, key)		  'If valueRef = 0 then //return an empty Dictionary		  'Return nil		  'End if		  'theValue = CoreFoundation.NewCFPropertyListObject(valueRef, kCFPropertyListImmutable)		  'Return CFType(theValue)		  '		  '#endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  #if TargetMacOS		    soft declare function CFBundleGetMainBundle lib CarbonFramework () as Ptr		    		    dim p as Ptr = CFBundleGetMainBundle		    if p = nil then		      return		    end if		    		    me.Operator_Convert p		    me.Retain		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NewCFBundle(theURL as CFURL) As CFBundle		  #if targetMacOS		    if theURL Is nil then		      return nil		    else		      soft declare function CFBundleCreate lib CarbonFramework (allocator as Ptr, bundleURL as Ptr) as Ptr		      		      dim bundleRef as Ptr = CFBundleCreate(nil, theURL)		      if bundleRef = nil then		        return nil		      else		        dim b as CFBundle = bundleRef		        return b		      end if		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NewCFBundle(bundleIdentifier as String) As CFBundle		  #if targetMacOS		    soft declare function CFBundleGetBundleWithIdentifier lib CarbonFramework (bundleID as CFStringRef) as Ptr		    		    dim theRef as Ptr = CFBundleGetBundleWithIdentifier(bundleIdentifier)		    if theRef = nil then		      return nil		    else		      dim b as CFBundle = theRef		      b.Retain		      return b		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FrameworksDirectory() As CFURL		  if me.Equals(nil) then		    return nil		  end if		  		  #if targetMacOS		    soft declare function CFBundleCopyPrivateFrameworksURL lib CarbonFramework (theBundle as Ptr) as Ptr		    		    dim theURL as CFURL = CFBundleCopyPrivateFrameworksURL(me)		    if theURL.Equals(nil) then		      return nil		    else		      return theURL		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function ClassID() As UInt32		  #if targetMacOS		    static inited as boolean		    static id as Uint32		    		    soft declare function CFBundleGetTypeID lib CarbonFramework () as UInt32		    		    if inited = false then		      id = CFBundleGetTypeID		      inited = true		    end if		    		  #endif		  		  return id		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function CarbonFramework() As CFBundle		  return NewCFBundle(CarbonBundleID)		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass