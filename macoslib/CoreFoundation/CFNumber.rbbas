#tag ClassClass CFNumberInherits CFTypeImplements CFPropertyList	#tag Method, Flags = &h0		Sub Constructor(value as Double)		  #if targetMacOS		    soft declare function CFNumberCreate Lib CarbonFramework (allocator as Ptr, theType as Integer, ByRef valuePtr as Double) as Ptr		    		    const kCFNumberDoubleType = 13		    me.Operator_Convert CFNumberCreate(nil, kCFNumberDoubleType, value)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(value as Integer)		  #if targetMacOS		    soft declare function CFNumberCreate Lib CarbonFramework (allocator as Ptr, theType as Integer, ByRef valuePtr as Integer) as Ptr		    		    const kCFNumberSInt32Type = 3		    me.Operator_Convert CFNumberCreate(nil, kCFNumberSInt32Type, value)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NaN() As CFNumber		  const kCFNumberNaN = "kCFNumberNaN"		  return SpecialValue(kCFNumberNaN)		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function PositiveInfinity() As CFNumber		  const kCFNumberPositiveInfinity = "kCFNumberPositiveInfinity"		  return SpecialValue(kCFNumberPositiveInfinity)		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function NegativeInfinity() As CFNumber		  const kCFNumberNegativeInfinity = "kCFNumberNegativeInfinity"		  return SpecialValue(kCFNumberNegativeInfinity)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function SpecialValue(symbolName as String) As CFNumber		  dim CarbonBundle as CFBundle = CFBundle.CarbonFramework		  if CarbonBundle is nil then		    return new CFNumber(0)		  end if		  		  dim p as Ptr = CarbonBundle.DataPointer(symbolName)		  if p = nil then		    return new CFNumber(0)		  end if		  		  dim value as CFNumber = p.Ptr(0)		  return value		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function ClassID() As UInt32		  #if targetMacOS		    static inited as boolean		    static id as Uint32		    		    soft declare function CFNumberGetTypeID lib CarbonFramework () as UInt32		    		    if inited = false then		      id = CFNumberGetTypeID		      inited = true		    end if		    		  #endif		  		  return id		End Function	#tag EndMethod	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			#if TargetMacOS			dim p as Ptr = me			if p = nil then			return 0			end if						soft declare function CFNumberGetValue Lib CarbonFramework (number as Ptr, theType as Integer, ByRef valuePtr as Integer) as Boolean						const kCFNumberSInt32Type = 3			dim theValue as Integer			if CFNumberGetValue(p, kCFNumberSInt32Type, theValue) then			return theValue			else			return theValue //but it's an approximate value			end if			#endif			End Get		#tag EndGetter		IntegerValue As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			#if TargetMacOS			dim p as Ptr = me			if p = nil then			return 0.0			end if						soft declare function CFNumberGetValue Lib CarbonFramework (number as Ptr, theType as Integer, ByRef valuePtr as Double) as Boolean						const kCFNumberDoubleType = 13			dim theValue as Double			if CFNumberGetValue(p, kCFNumberDoubleType, theValue) then			return theValue			else			return theValue //but it's an approximate value			end if			#endif			End Get		#tag EndGetter		DoubleValue As Double	#tag EndComputedProperty	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="IntegerValue"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleValue"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass