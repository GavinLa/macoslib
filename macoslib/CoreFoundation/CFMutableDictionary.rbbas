#tag ClassClass CFMutableDictionaryInherits CFDictionary	#tag Method, Flags = &h0		Sub Constructor()		  #if targetMacOS		    soft declare function CFDictionaryCreateMutable lib CarbonFramework (allocator as Ptr, capacity as Integer, keyCallbacks as Ptr, valueCallbacks as Ptr) as Ptr		    		    const kCFTypeDictionaryKeyCallBacks = "kCFTypeDictionaryKeyCallBacks"		    const kCFTypeDictionaryValueCallBacks = "kCFTypeDictionaryValueCallBacks"		    		    me.Operator_Convert CFDictionaryCreateMutable(nil, 0, me.DefaultCallbacks(kCFTypeDictionaryKeyCallBacks), me.DefaultCallbacks(kCFTypeDictionaryValueCallBacks))		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function DefaultCallbacks(name as String) As Ptr		  dim carbonBundle as CFBundle = CFBundle.NewCFBundle(CarbonBundleID)		  if carbonBundle <> nil then		    return carbonBundle.DataPointer(name)		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(theDictionary as CFDictionary)		  //overrides superclass method		  		  if theDictionary Is nil then		    return		  end if		  		  #if TargetMacOS		    soft declare function CFDictionaryCreateMutableCopy lib CarbonFramework (allocator as Ptr, capacity as Integer, theDict as Ptr) as Ptr		    		    me.Operator_Convert CFDictionaryCreateMutableCopy(nil, 0, me)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Clear()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CFDictionaryRemoveAllValues lib CarbonFramework (theDict as Ptr)		    		    CFDictionaryRemoveAllValues me		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Remove(key as CFType)		  if me = nil then		    return		  end if		  		  if key is nil then		    return		  end if		  		  #if targetMacOS		    //this function would be more accurately named "RemoveIfPresent"; if the key is not found, it just returns		    soft declare sub CFDictionaryRemoveValue lib CarbonFramework (theDict as ptr, key as Ptr)		    		    CFDictionaryRemoveValue me, key		  #endif		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Value(key as CFType, assigns value as CFType)		  if me = nil then		    return		  end if		  if key is nil then		    return		  end if		  if value is nil then		    return		  end if		  		  		  #if targetMacOS		    soft declare sub CFDictionarySetValue lib CarbonFramework (theDict as Ptr, key as Ptr, value as Ptr)		    		    CFDictionarySetValue me, key, value		  #endif		  		  		End Sub	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Count"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="CFDictionary"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass