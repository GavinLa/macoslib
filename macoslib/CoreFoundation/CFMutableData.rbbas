#tag ClassProtected Class CFMutableDataInherits CFType	#tag Method, Flags = &h0		Sub Constructor()		  #if targetMacOS		    soft declare function CFDataCreateMutable lib CarbonFramework (allocator as Ptr, capacity as Integer) as Ptr		    		    const capacity = 0 //can use available memory		    me.Operator_Convert CFDataCreateMutable(nil, capacity)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(data as CFData,)		  if data is nil then		    me.Constructor		    return		  end if		  		  #if targetMacOS		    soft declare function CFDataCreateMutableCopy lib CarbonFramework (allocator as Ptr, capacity as Integer, theData as Ptr) as Ptr		    		    const capacity = 0 //can use available memory		    me.Operator_Convert nil, capacity, data		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Append(p as Ptr, length as Integer)		  if me = nil then		    return		  end if		  		  if p = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CFDataAppendBytes lib CarbonFramework (theData as Ptr, bytes as Ptr, length as Integer)		    		    CFDataAppendBytes me, p, length		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Append(s as String)		  if me = nil then		    return		  end if		  		  if p = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CFDataAppendBytes lib CarbonFramework (theData as Ptr, bytes as CString, length as Integer)		    		    CFDataAppendBytes me, s, LenB(s)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Delete(start as Integer, length as Integer)		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CFDataDeleteBytes lib CarbonFramework (theData as Ptr, range as CFRange)		    		    CFDataDeleteBytes me, CFRangeMake(start, length)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Replace(start as Integer, length as Integer, newData as Ptr, newLength as Integer)		  if me = nil then		    return		  end if		  		  if newData = nil then		    me.Delete start, length		    return		  end if		  		  		  #if targetMacOS		    soft declare sub CFDataReplaceBytes lib CarbonFramework (theData as Ptr, range as CFRange, newBytes as Ptr, newLength as Integer)		    		    CFDataReplaceBytes me, CFRangeMake(start, length), newData, newLength		  #endif		End Sub	#tag EndMethodEnd Class#tag EndClass