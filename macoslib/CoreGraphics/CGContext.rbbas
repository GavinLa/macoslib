#tag ClassClass CGContextInherits CFType	#tag Method, Flags = &h0		Sub SetAlpha(value as Single)		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextSetAlpha lib CarbonFramework (context as Ptr, alpha as Single)		    //values outside range 0.0-1.0 are clipped, according to CGContextRef documentation.		    CGContextSetAlpha me, value		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Clear(rect as CGRect)		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextClearRect lib CarbonFramework (context as Ptr, rect as CGRect)		    		    CGContextClearRect me, rect		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Flush()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextFlush lib CarbonFramework (context as Ptr)		    		    CGContextFlush me		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub FillRect(rect as CGRect)		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextFillRect lib CarbonFramework (context as Ptr, rect as CGRect)		    		    CGContextFillRect me, rect		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveGState()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextSaveGState lib CarbonFramework (context as Ptr)		    		    CGContextSaveGState me		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RestoreGState()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextRestoreGState lib CarbonFramework (context as Ptr)		    		    CGContextRestoreGState me		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function ClassID() As UInt32		  soft declare function CGContextGetTypeID lib CarbonFramework () as UInt32		  		  return CGContextGetTypeID		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFlatness(flatness as Double)		  soft declare sub CGContextSetFlatness lib CarbonFramework (context as Ptr, flatness as Single)		  		  CGContextSetFlatness me, flatness		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFont(font as CGFont)		  if font is nil then		    return		  end if		  		  soft declare sub CGContextSetFont lib CarbonFramework (context as Ptr, font as Ptr)		  		  CGContextSetFont me, font		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFontSize(size as Double)		  soft declare sub CGContextSetFontSize lib CarbonFramework (context as Ptr, size as Single)		  		  CGContextSetFontSize me, size		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetLineCap(cap as CGLineCap)		  #if targetMacOS		    soft declare sub CGContextSetLineCap lib CarbonFramework (context as Ptr, size as CGLineCap)		    		    CGContextSetLineCap me, cap		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetLineDash(phase as Double, lengths() as Double, count as UInt32)		  #if targetMacOS		    soft declare sub CGContextSetLineDash lib CarbonFramework (phase as Single, lengths as Ptr, count as UInt32)		    		    if UBound(lengths) > -1 then		      dim lengthArray as MemoryBlock = CFloatArray(lengths)		      if lengthArray is nil then		        return		      end if		      CGContextSetLineDash phase, lengthArray, count		      		    else		      CGContextSetLineDash phase, nil, count		    end if		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRGBColor(c as Color, alpha as Double = 1.0)		  #if targetMacOS		    soft declare sub CGContextSetRGBFillColor lib CarbonFramework (context as Ptr, red as Single, green as Single, blue as Single, alpha as Single)		    		    CGContextSetRGBFillColor me, c.Red/255, c.Green/255, c.Blue/255, alpha		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ShowText(text as String)		  #if targetMacOS		    soft declare sub CGContextShowText lib CarbonFramework (context as Ptr, bytes as CString, length as Integer)		    		    CGContextShowText me, text, LenB(text)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetLineJoin(join as CGLineJoin)		  #if targetMacOS		    soft declare sub CGContextSetLineJoin lib CarbonFramework (context as Ptr, join as CGLineJoin)		    		    CGContextSetLineJoin me, join		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetLineWidth(width as Double)		  #if targetMacOS		    soft declare sub CGContextSetLineWidth lib CarbonFramework (context as Ptr, width as Single)		    		    CGContextSetLineWidth me, width		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetMiterLimit(limit as Double)		  #if targetMacOS		    soft declare sub CGContextSetMiterLimit lib CarbonFramework (context as Ptr, limit as Single)		    		    CGContextSetMiterLimit me, limit		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetPatternPhase(phase as CGSize)		  #if targetMacOS		    soft declare sub CGContextSetPatternPhase lib CarbonFramework (context as Ptr, phase as CGSize)		    		    CGContextSetPatternPhase me, phase		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFillPattern(pattern as CGPattern, components() as Double)		  if UBound(components) = -1 then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextSetFillPattern lib CarbonFramework (context as Ptr, pattern as Ptr, components as Ptr)		    		    dim componentArray as MemoryBlock = CFloatArray(components)		    if componentArray is nil then		      return		    end if		    		    CGContextSetFillPattern me, pattern, componentArray		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function CFloatArray(theList() as Double) As MemoryBlock		  if UBound(theList) = -1 then		    return nil		  end if		  		  const sizeOfSingle = 4		  dim theArray as new MemoryBlock(sizeOfSingle*(1 + UBound(theList)))		  dim offset as Integer = 0		  for i as Integer = 0 to UBound(theList)		    theArray.SingleValue(offset) = theList(i)		    offset = offset + sizeOfSingle		  next		  		  return theArray		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRenderingIntent(intent as CGColorRenderingIntent)		  #if targetMacOS		    soft declare sub CGContextSetRenderingIntent lib CarbonFramework (context as ptr, intent as CGColorRenderingIntent)		    		    CGContextSetRenderingIntent me, intent		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetShouldAntialias(shouldAntialias as Boolean)		  #if targetMacOS		    soft declare sub CGContextSetShouldAntialias lib CarbonFramework (context as Ptr, shouldAntialias as Boolean)		    		    CGContextSetShouldAntialias me, shouldAntialias		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetShouldSmoothFonts(shouldSmoothFonts as Boolean)		  #if targetMacOS		    soft declare sub CGContextSetShouldSmoothFonts lib CarbonFramework (context as Ptr, shouldSmoothFonts as Boolean)		    		    CGContextSetShouldSmoothFonts me, shouldSmoothFonts		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetStrokePattern(pattern as CGPattern, components() as Double)		  if UBound(components) = -1 then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextSetStrokePattern lib CarbonFramework (context as Ptr, pattern as Ptr, components as Ptr)		    		    dim componentArray as MemoryBlock = CFloatArray(components)		    if componentArray is nil then		      return		    end if		    		    CGContextSetStrokePattern me, pattern, componentArray		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetBlendMode(mode as CGBlendMode)		  #if targetMacOS		    soft declare sub CGContextSetBlendMode lib CarbonFramework (context as Ptr, mode as CGBlendMode)		    		    CGContextSetBlendMode me, mode		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetSAllowsAntialiasing(allowsAntialiasing as Boolean)		  #if targetMacOS		    soft declare sub CGContextSetAllowsAntialiasing lib CarbonFramework (context as Ptr, allowsAntialiasing as Boolean)		    		    CGContextSetAllowsAntialiasing me, allowsAntialiasing		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddArc(x as Double, y as Double, radius as Double, startAngle as Double, endAngle as Double, clockwise as Integer)		  #if targetMacOS		    soft declare sub CGContextAddArc lib CarbonFramework (context as Ptr, x as Single, y as Single, radius as Single, startAngle as Single, endAngle as Single, clockwise as Integer)		    		    CGContextAddArc me, x, y, radius, startAngle, endAngle, clockwise		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddArcToPoint(x1 as Double, y1 as Double, x2 as Double, y2 as Double, radius as Double)		  #if targetMacOS		    soft declare sub CGContextAddArcToPoint lib CarbonFramework (context as Ptr, x1 as Single, y1 as Single, x2 as Single, y2 as Single, radius as Single)		    		    CGContextAddArcToPoint me, x1, y1, x2, y2, radius		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddCurveToPoint(cp1x as Double, cp1y as Double, cp2x as Double, cp2y as Double, x as Double, y as Double)		  #if targetMacOS		    soft declare sub CGContextAddCurveToPoint lib CarbonFramework (context as Ptr, cp1x as Single, cp1y as Single, cp2x as Single, cp2y as Single, x as Single, y as Single)		    		    CGContextAddCurveToPoint me, cp1x, cp1y, cp2x, cp2y, x, y		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddLines(points() as CGPoint)		  if UBound(points) = -1 then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextAddLines lib CarbonFramework (context as ptr, points as Ptr, count as Integer)		    		    dim pointsArray as new MemoryBlock(CGPoint.Size*(1 + UBound(points)))		    dim offset as Integer = 0		    for i as Integer = 0 to UBound(points)		      pointsArray.StringValue(offset, CGPoint.Size) = points(i).StringValue(not targetBigEndian)		      offset = offset + CGPoint.Size		    next		    CGContextAddLines me, pointsArray, 1 + UBound(points)		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawImage(image as CGImage, rect as CGRect)		  if image is nil then		    return		  end if		  		  soft declare sub CGContextDrawImage lib CarbonFramework (context as Ptr, rect as CGRect, image as Ptr)		  		  CGContextDrawImage me, rect, image		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub BeginTransparencyLayer()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextBeginTransparencyLayer lib CarbonFramework (context as Ptr, auxiliaryInfo as Ptr)		    		    //second parameter is currently unused, according to Apple docs		    CGContextBeginTransparencyLayer me, nil		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub EndTransparencyLayer()		  if me = nil then		    return		  end if		  		  #if targetMacOS		    soft declare sub CGContextEndTransparencyLayer lib CarbonFramework (context as Ptr)		    		    CGContextEndTransparencyLayer me		  #endif		End Sub	#tag EndMethod	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			soft declare function CGContextGetInterpolationQuality lib CarbonFramework (context as Ptr) as CGInterpolationQuality						return CGContextGetInterpolationQuality(me)			End Get		#tag EndGetter		#tag Setter			Set			soft declare sub CGContextSetInterpolationQuality lib CarbonFramework (context as Ptr, quality as CGInterpolationQuality)						CGContextSetInterpolationQuality me, value			End Set		#tag EndSetter		InterpolationQuality As CGInterpolationQuality	#tag EndComputedProperty	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass