#tag ModuleProtected Module MacOSFolderItemExtension	#tag Method, Flags = &h0		Function IsNetworkVolume(f as FolderItem) As Boolean		  if f Is nil then		    return false		  end if		  		  #if TargetMacOS		    soft declare function PBHGetVolParmsSync lib CarbonFramework (ByRef paramBlock as HIOParam) as Short		    		    dim paramBlock as HIOParam		    paramBlock.ioVRefNum = f.MacVRefNum		    //the following line is a trick to work around the inability to assign a pointer to a structure		    //to a field of type Ptr.		    dim infoBuffer as new MemoryBlock(GetVolParmsInfoBuffer.Size)		    paramBlock.ioBuffer = infoBuffer		    paramBlock.ioReqCount = infoBuffer.Size		    		    dim OSError as Integer = PBHGetVolParmsSync(paramBlock)		    if OSError <> 0 then		      return false		    end if		    return (infoBuffer.Long(10) <> 0)		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function POSIXPath(extends f as FolderItem) As String		  dim theRef as FSRef = GetFSRefFromFolderItem(f)		  dim path as new MemoryBlock(1024)		  do		    soft declare function FSRefMakePath lib CarbonFramework (ByRef ref as FSRef, path as Ptr, maxPathSize as Integer) as  Integer		    		    dim OSStatus as Integer = FSRefMakePath(theRef, path, path.Size)		    const noErr = 0		    const nsvErr = -35		    const pathTooLongErr = -2110		    if OSStatus = noErr then		      return DefineEncoding(path.CString(0), Encodings.UTF8)		      		    elseif OSStatus = pathTooLongErr then		      path = new MemoryBlock(path.Size + path.Size)		      		    else		      if f.Parent <> nil then		        return f.Parent.POSIXPath + "/" + f.Name		      else		        return "/" + f.Name		      end if		      		    end if		  loop		  		  #if targetLinux		    return f.AbsolutePath		  #endif		  		  #if targetWin32		    //does such a thing exist for Windows?		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MoveToTrash(extends f as FolderItem)		  #if targetMacOS		    dim source as FSRef = FileManager.GetFSRefFromFolderItem(f)		    		    soft declare function FSMoveObjectToTrashSync lib CarbonFramework (ByRef source as FSRef, target as Ptr, options as UInt32) as Integer		    		    dim OSError as Integer = FSMoveObjectToTrashSync(source, nil, 0)		  #endif		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IsBundle(f as FolderItem) As Boolean		  if f is nil then		    return false		  end if		  		  #if TargetMacOS		    soft declare function LSCopyItemInfoForRef Lib CarbonFramework (ByRef inItemRef as FSRef, inWhichInfo as Integer, ByRef outItemInfo as LSItemInfoRecord) as Integer		    		    const kLSRequestBasicFlagsOnly = &h00000004		    const kLSItemInfoIsPackage = &h00000002		    		    dim theRef as FSRef = FileManager.GetFSRefFromFolderItem(f)		    dim itemInfo as LSItemInfoRecord		    dim OSError as Integer = LSCopyItemInfoForRef(theRef, kLSRequestBasicFlagsOnly, itemInfo)		    if OSError <> 0 then		      break		    end if		    return (itemInfo.Flags and kLSItemInfoIsPackage) = kLSItemInfoIsPackage		  #endif		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule