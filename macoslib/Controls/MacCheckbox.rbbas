#tag ClassProtected Class MacCheckboxInherits Canvas	#tag Event		Sub Open()		  me.AutoToggle = true		  me.ControlRef = me.CreateControl		  		  		  'if me.pCaption <> "" then		  'me.Caption = me.pCaption		  'me.pCaption = ""		  'end if		  		  		  		  Open		End Sub	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  if me.ControlRef = nil then		    return false		  end if		  		  return true		End Function	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  if me.ControlRef = nil then		    return		  end if		  		  #if targetMacOS		    soft declare function HandleControlClick lib CarbonFramework (inControl as ptr, inWhere as MacPoint, inModifiers as UInt16, inAction as Ptr) as Int16		    		    dim where as MacPoint		    if me.ParentWindow.Composite then		      where.v = Y		      where.h = X		    else		      where.v = me.MouseY		      where.h = me.MouseX		    end if		    		    dim partCode as Int16 = HandleControlClick(me.ControlRef, where, Modifiers(Keyboard.CommandKey, Keyboard.ShiftKey, Keyboard.OptionKey, Keyboard.ControlKey), nil)		  #endif		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  if me.ControlRef = nil then		    return		  end if		  		  me.ControlEnabled = me.Enabled		  		End Sub	#tag EndEvent	#tag Method, Flags = &h21		Private Function CreateControl() As Ptr		  #if targetMacOS		    soft declare function CreateCheckBoxControl lib CarbonFramework (window as WindowPtr, ByRef boundsRect as MacRect, title as CFStringRef, initialValue as Int32, autoToggle as Boolean, ByRef outControl as Ptr) as Int32		    		    dim p as Ptr		    dim bounds as MacRect		    bounds.top = me.LocalTop		    bounds.left = me.LocalLeft		    bounds.bottom = bounds.Top + me.Height		    bounds.right = bounds.left + me.Width		    dim OSError as Integer = CreateCheckBoxControl(me.ParentWindow, bounds, me.InitialCaption, me.InitialValue, me.AutoToggle, p)		    if OSError = noErr then		      return p		    else		      break		      return nil		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function LocalTop() As Integer		  dim w as Window = me.Window		  if w isA ContainerControl then		    return w.Top + me.Top		  else		    return me.Top		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function LocalLeft() As Integer		  dim w as Window = me.Window		  if w isA ContainerControl then		    return w.Left + me.Left		  else		    return me.Left		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function ParentWindow() As Window		  dim w as Window = me.Window		  do		    if w IsA ContainerControl then		      w = ContainerControl(w).Window		    else		      exit		    end if		  loop		  return w		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function ContentViewRef() As Integer		  'OSStatus HIViewFindByID (		  'HIViewRef inStartView,		  'HIViewID inID,		  'HIViewRef * outControl		  ');		  '		  'struct ControlID {		  'OSType signature;		  'SInt32 id;		  '};		  'typedef struct ControlID ControlID;		  'typedef ControlID HIViewID;		  		  Soft Declare Function CFBundleGetBundleWithIdentifier Lib CarbonLib (bundleID as CFStringRef) as Integer		  		  dim CarbonBundle as Integer = CFBundleGetBundleWithIdentifier("com.apple.Carbon")		  		  Soft Declare Function CFBundleGetDataPointerForName Lib CarbonLib (bundle as Integer, symbolName as CFStringRef) as Ptr		  dim contentViewID as Ptr = CFBundleGetDataPointerForName(CarbonBundle, "kHIViewWindowContentID")		  if contentViewID = nil then		    return 0		  end if		  		  Soft Declare Function HIViewFindByID Lib CarbonLib (inStartView as Integer, signature as Integer, id as Integer, byRef outControl as Integer) as Integer		  		  dim theViewRef as Integer		  dim OSError as Integer = HIViewFindByID(me.RootView, contentViewID.Integer(0), contentViewID.Integer(4), theViewRef)		  If OSError <> 0 then		    break		    theViewRef = 0		  End if		  Return theViewRef		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function RootView() As Integer		  soft declare function HIViewGetRoot Lib CarbonFramework (inWindow as Ptr) as Integer		  		  dim w as Ptr = Ptr(me.ParentWindow.Handle)		  if w = nil then		    return 0		  end if		  		  return HIViewGetRoot(w)		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub RegisterCarbonEventHandler()		  'if me.ControlRef = nil then		  'return		  'end if		  '		  '#pragma StackOverflowChecking False		  '		  'soft declare function InstallEventHandler Lib CarbonLib (inTarget as Ptr, inHandler as Ptr, inNumTypes as Integer, inList as Ptr,  inUserData as Ptr, handlerRef as Ptr) as Integer		  '		  '//inTarget		  'soft declare function HIObjectGetEventTarget Lib CarbonLib (inObject as Ptr) as Ptr		  '		  'dim eventTarget as Ptr = HIObjectGetEventTarget(me.ControlRef)		  'If eventTarget = nil then		  'Return		  'End if		  '		  '//inHandler		  'soft declare function NewEventHandlerUPP Lib CarbonLib (userRoutine as Ptr) as Ptr		  '		  'static CallbackUPP as Ptr = NewEventHandlerUPP(AddressOf ForwardCarbonEventToObject)		  'If CallbackUPP = nil then		  'return		  'end If		  '		  '//events		  'Const sizeOfEventTypeSpec = 8		  'Const EventCount  = 1		  'dim eventList as new MemoryBlock(EventCount*sizeOfEventTypeSpec)		  'eventList.UInt32Value(0) = OSTypeToUInt(kEventClassControl)		  'eventList.UInt32Value(4) = kEventControlDraw		  ''eventList.UInt32Value(8) = OSTypeToUInt(kEventClassSearchField)		  ''eventList.UInt32Value(12) = kEventSearchFieldCancelClicked		  ''eventList.UInt32Value(16) = OSTypeToUInt(kEventClassTextField)		  ''eventList.UInt32Value(20) = kEventTextAccepted		  ''eventList.UInt32Value(24) = OSTypeToUInt(kEventClassControl)		  ''eventList.UInt32Value(28) = kEventControlSetFocusPart		  ''eventList.UInt32Value(32) = OSTypeToUInt(kEventClassControl)		  ''eventList.UInt32Value(36) = kEventControlSetData		  ''eventList.UInt32Value(40) = OSTypeToUInt(kEventClassTextField) //only good in OS 10.4		  ''eventList.UInt32Value(44) = kEventTextDidChange		  '		  '//inUserData		  'dim v as Variant = me		  '		  '//handlerRef		  '//I don't want it returned		  '		  'dim OSError as Integer = InstallEventHandler(eventTarget, CallbackUPP, eventList.Size\sizeOfEventTypeSpec, eventList, v.Hash, Nil)		  '		  '		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function Modifiers(commandKey as Boolean, shiftKey as Boolean, optionKey as Boolean, controlKey as Boolean) As UInt16		  dim theResult as UInt16		  if commandKey then		    theResult = theResult or ShiftLeft(1, Carbon.cmdKeyBit)		  end if		  if shiftKey then		    theResult = theResult or ShiftLeft(1, Carbon.shiftKeyBit)		  end if		  if optionKey then		    theResult = theResult or ShiftLeft(1, Carbon.optionKeyBit)		  end if		  if controlKey then		    theResult = theResult or ShiftLeft(1, Carbon.controlKeyBit)		  end if		  		  return theResult		  		  		  		  'enum {		  'activeFlagBit = 0,		  'btnStateBit = 7,		  'cmdKeyBit = 8,		  'shiftKeyBit = 9,		  'alphaLockBit = 10,		  'optionKeyBit = 11,		  'controlKeyBit = 12,		  'rightShiftKeyBit = 13,		  'rightOptionKeyBit = 14,		  'rightControlKeyBit = 15		  '};		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event Action()	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Note, Name = Setting Values in IDE		Values set in the IDE are assigned before the control's Open event handler is called, and thus		before the Mac OS control is created.  These values are saved to properties and then assigned in the Open event handler.			#tag EndNote	#tag Property, Flags = &h21		Private ControlRef As Ptr	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			if me.ControlRef = nil then			return 0			end if									#if targetMacOS			soft declare function GetControl32BitValue lib CarbonFramework (theControl as Ptr) as Int32						return GetControl32BitValue(me.ControlRef)			#endif			End Get		#tag EndGetter		#tag Setter			Set			#if targetMacOS			if me.ControlRef <> nil then			soft declare sub SetControl32BitValue lib CarbonFramework (theControl as Ptr, newValue as Int32)						SetControl32BitValue me.ControlRef, value			else			me.InitialValue = value			end if			#endif			End Set		#tag EndSetter		Value As Integer	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			#if targetMacOS			if me.ControlRef <> nil then			soft declare function CopyControlTitleAsCFString lib CarbonFramework (inControl as Ptr, ByRef outString as CFStringRef) as Integer						dim value as CFStringRef			dim OSError as Integer = CopyControlTitleAsCFString(me.ControlRef, value)			if OSError = noErr then			return value			else			return ""			end if						else			return me.InitialCaption			end if			#endif			End Get		#tag EndGetter		#tag Setter			Set			//see note Setting Values in IDE for info on pCaption						#if targetMacOS			if me.ControlRef  <> nil then			soft declare function SetControlTitleWithCFString lib CarbonFramework (inControl as Ptr, inString as CFStringRef) as Int32						dim OSError as Integer = SetControlTitleWithCFString(me.ControlRef, value)			else			me.InitialCaption = value 			end if			#endif			End Set		#tag EndSetter		Caption As String	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h21		#tag Getter			Get			if me.ControlRef = nil then			return false			end if						#if targetMacOS			soft declare function HIViewIsVisible lib CarbonFramework (inView as Ptr) as Boolean						return HIViewIsVisible(me.ControlRef)			#endif						End Get		#tag EndGetter		#tag Setter			Set			if me.ControlRef = nil then			return			end if						#if targetMacOS			dim w as Window = me.ParentWindow			if w is nil then			return			end if			if w.Composite then			soft declare function HIViewSetVisible lib CarbonFramework (inView as Ptr, visible as Boolean) as Integer						dim OSError as Integer = HIViewSetVisible(me.ControlRef, value)			else			soft declare function SetControlVisibility lib CarbonFramework (inControl as Ptr, inIsVisible as Boolean, inDoDraw as Boolean) as Integer						dim OSError as Integer = SetControlVisibility(me.ControlRef, value, true)			end if			#endif			End Set		#tag EndSetter		Private ControlVisible As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h21		Private mAutoToggle As Boolean	#tag EndProperty	#tag Property, Flags = &h0		AutoToggle As Boolean = true	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			if me.ControlRef = nil then			return nil			end if						#if targetMacOS			soft declare function HIViewGetSuperview lib CarbonFramework (inView as Ptr) as Ptr						return HIViewGetSuperview(me.ControlRef)			#endif			End Get		#tag EndGetter		Superview As Ptr	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			'OSStatus HIViewFindByID (			'HIViewRef inStartView,			'HIViewID inID,			'HIViewRef * outControl			');			'			'struct ControlID {			'OSType signature;			'SInt32 id;			'};			'typedef struct ControlID ControlID;			'typedef ControlID HIViewID;						Soft Declare Function CFBundleGetBundleWithIdentifier Lib CarbonFramework (bundleID as CFStringRef) as Integer						dim CarbonBundle as Integer = CFBundleGetBundleWithIdentifier("com.apple.Carbon")						Soft Declare Function CFBundleGetDataPointerForName Lib CarbonFramework (bundle as Integer, symbolName as CFStringRef) as Ptr			dim contentViewID as Ptr = CFBundleGetDataPointerForName(CarbonBundle, "kHIViewWindowContentID")			if contentViewID = nil then			return nil			end if						Soft Declare Function HIViewFindByID Lib CarbonFramework (inStartView as Integer, signature as Integer, id as Integer, byRef outControl as Ptr) as Integer						dim theViewRef as Ptr			dim OSError as Integer = HIViewFindByID(me.RootView, contentViewID.Integer(0), contentViewID.Integer(4), theViewRef)			If OSError <> 0 then			break			theViewRef = nil			End if			Return theViewRef			End Get		#tag EndGetter		ContentView As Ptr	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			return Canvas(me).Visible			End Get		#tag EndGetter		#tag Setter			Set			me.ControlVisible = value			Canvas(me).Visible = value			End Set		#tag EndSetter		Visible As Boolean	#tag EndComputedProperty	#tag ComputedProperty, Flags = &h21		#tag Setter			Set			if me.ControlRef = nil then			return			end if									#if targetMacOS			dim w as Window = me.ParentWindow			if w is nil then			return			end if			if w.Composite then			soft declare function HIViewSetEnabled lib CarbonFramework (inView as Ptr, inSetEnabled as Boolean) as Integer						dim OSError as Integer = HIViewSetEnabled(me.ControlRef, value)						else			if me.Enabled then			soft declare function EnableControl lib CarbonFramework (inControl as Ptr) as Integer						dim OSError as Integer = EnableControl(me.ControlRef)						else			soft declare function DisableControl lib CarbonFramework (inControl as Ptr) as Integer						dim OSError as Integer = DisableControl(me.ControlRef)			end if			end if			#endif			End Set		#tag EndSetter		Private ControlEnabled As Boolean	#tag EndComputedProperty	#tag Property, Flags = &h21		Private InitialCaption As String = "MacCheckbox"	#tag EndProperty	#tag Property, Flags = &h21		Private InitialValue As Integer	#tag EndProperty	#tag Constant, Name = Checked, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = Unchecked, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = Mixed, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="ControlOrder"			Visible=true			Group="Position"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Group="Appearance"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptFocus"			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Behavior"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoToggle"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Value"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			#tag EnumValues				"0 - Unchecked"				"1 - Checked"				"2 - Mixed"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Caption"			Visible=true			Group="Behavior"			InitialValue="MacCheckbox"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass